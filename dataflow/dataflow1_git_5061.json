{
	"name": "dataflow1_git_5061",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          City as string,",
				"          NoOfChildren as string,",
				"          MinAgeOfChild as string,",
				"          MaxAgeOfChild as string,",
				"          Tenure as string,",
				"          FrquncyOfPurchase as string,",
				"          NoOfUnitsPurchased as string,",
				"          FrequencyOFPlay as string,",
				"          NoOfGamesPlayed as string,",
				"          NoOfGamesBought as string,",
				"          FavoriteChannelOfTransaction as string,",
				"          FavoriteGame as string,",
				"          TotalRevenueGenerated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(equals(City,\"1\"),",
				"     disjoint: false) ~> split1@(city1, city2)",
				"split1@city1 filter(toInteger(NoOfChildren) <= 5) ~> filter1",
				"filter1 aggregate(groupBy(NoOfChildren),",
				"     Total_Revenue = sum(toInteger(TotalRevenueGenerated))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Merchant_ID as string,",
				"          Fraudster as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}